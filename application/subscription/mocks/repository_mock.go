// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository.go

// Package mock_subscription is a generated GoMock package.
package mock_subscription

import (
	models "kudago/application/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddPlanning mocks base method.
func (m *MockRepository) AddPlanning(userId, eventId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlanning", userId, eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPlanning indicates an expected call of AddPlanning.
func (mr *MockRepositoryMockRecorder) AddPlanning(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlanning", reflect.TypeOf((*MockRepository)(nil).AddPlanning), userId, eventId)
}

// AddVisited mocks base method.
func (m *MockRepository) AddVisited(userId, eventId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVisited", userId, eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVisited indicates an expected call of AddVisited.
func (mr *MockRepositoryMockRecorder) AddVisited(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVisited", reflect.TypeOf((*MockRepository)(nil).AddVisited), userId, eventId)
}

// GetEventFollowers mocks base method.
func (m *MockRepository) GetEventFollowers(eventId uint64) (models.UsersOnEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventFollowers", eventId)
	ret0, _ := ret[0].(models.UsersOnEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventFollowers indicates an expected call of GetEventFollowers.
func (mr *MockRepositoryMockRecorder) GetEventFollowers(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventFollowers", reflect.TypeOf((*MockRepository)(nil).GetEventFollowers), eventId)
}

// GetFollowers mocks base method.
func (m *MockRepository) GetFollowers(id uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowers", id)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowers indicates an expected call of GetFollowers.
func (mr *MockRepositoryMockRecorder) GetFollowers(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowers", reflect.TypeOf((*MockRepository)(nil).GetFollowers), id)
}

// GetPlanningEvents mocks base method.
func (m *MockRepository) GetPlanningEvents(id uint64) ([]models.EventCardWithDateSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlanningEvents", id)
	ret0, _ := ret[0].([]models.EventCardWithDateSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlanningEvents indicates an expected call of GetPlanningEvents.
func (mr *MockRepositoryMockRecorder) GetPlanningEvents(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlanningEvents", reflect.TypeOf((*MockRepository)(nil).GetPlanningEvents), id)
}

// GetVisitedEvents mocks base method.
func (m *MockRepository) GetVisitedEvents(id uint64) ([]models.EventCardWithDateSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisitedEvents", id)
	ret0, _ := ret[0].([]models.EventCardWithDateSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVisitedEvents indicates an expected call of GetVisitedEvents.
func (mr *MockRepositoryMockRecorder) GetVisitedEvents(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisitedEvents", reflect.TypeOf((*MockRepository)(nil).GetVisitedEvents), id)
}

// IsAddedEvent mocks base method.
func (m *MockRepository) IsAddedEvent(userId, eventId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAddedEvent", userId, eventId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAddedEvent indicates an expected call of IsAddedEvent.
func (mr *MockRepositoryMockRecorder) IsAddedEvent(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAddedEvent", reflect.TypeOf((*MockRepository)(nil).IsAddedEvent), userId, eventId)
}

// RemovePlanning mocks base method.
func (m *MockRepository) RemovePlanning(userId, eventId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePlanning", userId, eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePlanning indicates an expected call of RemovePlanning.
func (mr *MockRepositoryMockRecorder) RemovePlanning(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePlanning", reflect.TypeOf((*MockRepository)(nil).RemovePlanning), userId, eventId)
}

// RemoveVisited mocks base method.
func (m *MockRepository) RemoveVisited(userId, eventId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVisited", userId, eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVisited indicates an expected call of RemoveVisited.
func (mr *MockRepositoryMockRecorder) RemoveVisited(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVisited", reflect.TypeOf((*MockRepository)(nil).RemoveVisited), userId, eventId)
}

// SubscribeUser mocks base method.
func (m *MockRepository) SubscribeUser(subscriberId, subscribedToId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeUser", subscriberId, subscribedToId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeUser indicates an expected call of SubscribeUser.
func (mr *MockRepositoryMockRecorder) SubscribeUser(subscriberId, subscribedToId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeUser", reflect.TypeOf((*MockRepository)(nil).SubscribeUser), subscriberId, subscribedToId)
}

// UnsubscribeUser mocks base method.
func (m *MockRepository) UnsubscribeUser(subscriberId, subscribedToId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeUser", subscriberId, subscribedToId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubscribeUser indicates an expected call of UnsubscribeUser.
func (mr *MockRepositoryMockRecorder) UnsubscribeUser(subscriberId, subscribedToId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeUser", reflect.TypeOf((*MockRepository)(nil).UnsubscribeUser), subscriberId, subscribedToId)
}

// UpdateEventStatus mocks base method.
func (m *MockRepository) UpdateEventStatus(userId, eventId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventStatus", userId, eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventStatus indicates an expected call of UpdateEventStatus.
func (mr *MockRepositoryMockRecorder) UpdateEventStatus(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventStatus", reflect.TypeOf((*MockRepository)(nil).UpdateEventStatus), userId, eventId)
}
