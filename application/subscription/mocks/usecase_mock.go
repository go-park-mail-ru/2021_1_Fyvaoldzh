// Code generated by MockGen. DO NOT EDIT.
// Source: ../usecase.go

// Package mock_subscription is a generated GoMock package.
package mock_subscription

import (
	models "kudago/application/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetFollowers mocks base method.
func (m *MockUseCase) GetFollowers(id uint64, page int) (models.UserCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowers", id, page)
	ret0, _ := ret[0].(models.UserCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowers indicates an expected call of GetFollowers.
func (mr *MockUseCaseMockRecorder) GetFollowers(id, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowers", reflect.TypeOf((*MockUseCase)(nil).GetFollowers), id, page)
}

// GetPlanningEvents mocks base method.
func (m *MockUseCase) GetPlanningEvents(id uint64, page int) (models.EventCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlanningEvents", id, page)
	ret0, _ := ret[0].(models.EventCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlanningEvents indicates an expected call of GetPlanningEvents.
func (mr *MockUseCaseMockRecorder) GetPlanningEvents(id, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlanningEvents", reflect.TypeOf((*MockUseCase)(nil).GetPlanningEvents), id, page)
}

// GetSubscriptions mocks base method.
func (m *MockUseCase) GetSubscriptions(id uint64, page int) (models.UserCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptions", id, page)
	ret0, _ := ret[0].(models.UserCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptions indicates an expected call of GetSubscriptions.
func (mr *MockUseCaseMockRecorder) GetSubscriptions(id, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptions", reflect.TypeOf((*MockUseCase)(nil).GetSubscriptions), id, page)
}

// GetVisitedEvents mocks base method.
func (m *MockUseCase) GetVisitedEvents(id uint64, page int) (models.EventCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisitedEvents", id, page)
	ret0, _ := ret[0].(models.EventCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVisitedEvents indicates an expected call of GetVisitedEvents.
func (mr *MockUseCaseMockRecorder) GetVisitedEvents(id, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisitedEvents", reflect.TypeOf((*MockUseCase)(nil).GetVisitedEvents), id, page)
}

// IsAddedEvent mocks base method.
func (m *MockUseCase) IsAddedEvent(userId, eventId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAddedEvent", userId, eventId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAddedEvent indicates an expected call of IsAddedEvent.
func (mr *MockUseCaseMockRecorder) IsAddedEvent(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAddedEvent", reflect.TypeOf((*MockUseCase)(nil).IsAddedEvent), userId, eventId)
}

// UpdateEventStatus mocks base method.
func (m *MockUseCase) UpdateEventStatus(userId, eventId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventStatus", userId, eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventStatus indicates an expected call of UpdateEventStatus.
func (mr *MockUseCaseMockRecorder) UpdateEventStatus(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventStatus", reflect.TypeOf((*MockUseCase)(nil).UpdateEventStatus), userId, eventId)
}
