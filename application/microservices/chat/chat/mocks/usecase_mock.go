// Code generated by MockGen. DO NOT EDIT.
// Source: ../usecase.go

// Package mock_chat is a generated GoMock package.
package mock_chat

import (
	models "kudago/application/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AutoMailingConstructor mocks base method.
func (m *MockUseCase) AutoMailingConstructor(to uint64, from, eventName, eventID string) models.NewMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoMailingConstructor", to, from, eventName, eventID)
	ret0, _ := ret[0].(models.NewMessage)
	return ret0
}

// AutoMailingConstructor indicates an expected call of AutoMailingConstructor.
func (mr *MockUseCaseMockRecorder) AutoMailingConstructor(to, from, eventName, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMailingConstructor", reflect.TypeOf((*MockUseCase)(nil).AutoMailingConstructor), to, from, eventName, eventID)
}

// DeleteDialogue mocks base method.
func (m *MockUseCase) DeleteDialogue(uid, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDialogue", uid, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDialogue indicates an expected call of DeleteDialogue.
func (mr *MockUseCaseMockRecorder) DeleteDialogue(uid, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDialogue", reflect.TypeOf((*MockUseCase)(nil).DeleteDialogue), uid, id)
}

// DeleteMessage mocks base method.
func (m *MockUseCase) DeleteMessage(uid, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", uid, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockUseCaseMockRecorder) DeleteMessage(uid, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockUseCase)(nil).DeleteMessage), uid, id)
}

// EditMessage mocks base method.
func (m *MockUseCase) EditMessage(uid uint64, newMessage *models.RedactMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMessage", uid, newMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditMessage indicates an expected call of EditMessage.
func (mr *MockUseCaseMockRecorder) EditMessage(uid, newMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMessage", reflect.TypeOf((*MockUseCase)(nil).EditMessage), uid, newMessage)
}

// GetAllCounts mocks base method.
func (m *MockUseCase) GetAllCounts(uid uint64) (models.Counts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounts", uid)
	ret0, _ := ret[0].(models.Counts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCounts indicates an expected call of GetAllCounts.
func (mr *MockUseCaseMockRecorder) GetAllCounts(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounts", reflect.TypeOf((*MockUseCase)(nil).GetAllCounts), uid)
}

// GetAllDialogues mocks base method.
func (m *MockUseCase) GetAllDialogues(uid uint64, page int) (models.DialogueCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDialogues", uid, page)
	ret0, _ := ret[0].(models.DialogueCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDialogues indicates an expected call of GetAllDialogues.
func (mr *MockUseCaseMockRecorder) GetAllDialogues(uid, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDialogues", reflect.TypeOf((*MockUseCase)(nil).GetAllDialogues), uid, page)
}

// GetAllNotifications mocks base method.
func (m *MockUseCase) GetAllNotifications(uid uint64, page int) (models.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotifications", uid, page)
	ret0, _ := ret[0].(models.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotifications indicates an expected call of GetAllNotifications.
func (mr *MockUseCaseMockRecorder) GetAllNotifications(uid, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotifications", reflect.TypeOf((*MockUseCase)(nil).GetAllNotifications), uid, page)
}

// GetOneDialogue mocks base method.
func (m *MockUseCase) GetOneDialogue(uid, id uint64, page int) (models.Dialogue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneDialogue", uid, id, page)
	ret0, _ := ret[0].(models.Dialogue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneDialogue indicates an expected call of GetOneDialogue.
func (mr *MockUseCaseMockRecorder) GetOneDialogue(uid, id, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneDialogue", reflect.TypeOf((*MockUseCase)(nil).GetOneDialogue), uid, id, page)
}

// IsInterlocutor mocks base method.
func (m *MockUseCase) IsInterlocutor(uid uint64, elem models.EasyDialogueMessageSQL) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInterlocutor", uid, elem)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInterlocutor indicates an expected call of IsInterlocutor.
func (mr *MockUseCaseMockRecorder) IsInterlocutor(uid, elem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInterlocutor", reflect.TypeOf((*MockUseCase)(nil).IsInterlocutor), uid, elem)
}

// IsSenderMessage mocks base method.
func (m *MockUseCase) IsSenderMessage(uid uint64, elem models.EasyDialogueMessageSQL) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSenderMessage", uid, elem)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSenderMessage indicates an expected call of IsSenderMessage.
func (mr *MockUseCaseMockRecorder) IsSenderMessage(uid, elem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSenderMessage", reflect.TypeOf((*MockUseCase)(nil).IsSenderMessage), uid, elem)
}

// Mailing mocks base method.
func (m *MockUseCase) Mailing(uid uint64, mailing *models.Mailing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mailing", uid, mailing)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mailing indicates an expected call of Mailing.
func (mr *MockUseCaseMockRecorder) Mailing(uid, mailing interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mailing", reflect.TypeOf((*MockUseCase)(nil).Mailing), uid, mailing)
}

// Search mocks base method.
func (m *MockUseCase) Search(uid uint64, id int, str string, page int) (models.DialogueCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", uid, id, str, page)
	ret0, _ := ret[0].(models.DialogueCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockUseCaseMockRecorder) Search(uid, id, str, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockUseCase)(nil).Search), uid, id, str, page)
}

// SendMessage mocks base method.
func (m *MockUseCase) SendMessage(newMessage *models.NewMessage, uid uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", newMessage, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockUseCaseMockRecorder) SendMessage(newMessage, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockUseCase)(nil).SendMessage), newMessage, uid)
}
