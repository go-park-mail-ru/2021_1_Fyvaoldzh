// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository.go

// Package mock_chat is a generated GoMock package.
package mock_chat

import (
	models "kudago/application/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddCountMessages mocks base method.
func (m *MockRepository) AddCountMessages(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCountMessages", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCountMessages indicates an expected call of AddCountMessages.
func (mr *MockRepositoryMockRecorder) AddCountMessages(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCountMessages", reflect.TypeOf((*MockRepository)(nil).AddCountMessages), id)
}

// AddCountNotification mocks base method.
func (m *MockRepository) AddCountNotification(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCountNotification", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCountNotification indicates an expected call of AddCountNotification.
func (mr *MockRepositoryMockRecorder) AddCountNotification(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCountNotification", reflect.TypeOf((*MockRepository)(nil).AddCountNotification), id)
}

// AddMailNotification mocks base method.
func (m *MockRepository) AddMailNotification(id, idTo uint64, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMailNotification", id, idTo, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMailNotification indicates an expected call of AddMailNotification.
func (mr *MockRepositoryMockRecorder) AddMailNotification(id, idTo, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMailNotification", reflect.TypeOf((*MockRepository)(nil).AddMailNotification), id, idTo, now)
}

// CheckDialogueID mocks base method.
func (m *MockRepository) CheckDialogueID(id uint64) (bool, models.EasyDialogueMessageSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDialogueID", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(models.EasyDialogueMessageSQL)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckDialogueID indicates an expected call of CheckDialogueID.
func (mr *MockRepositoryMockRecorder) CheckDialogueID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDialogueID", reflect.TypeOf((*MockRepository)(nil).CheckDialogueID), id)
}

// CheckDialogueUsers mocks base method.
func (m *MockRepository) CheckDialogueUsers(uid1, uid2 uint64) (bool, models.EasyDialogueMessageSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDialogueUsers", uid1, uid2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(models.EasyDialogueMessageSQL)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckDialogueUsers indicates an expected call of CheckDialogueUsers.
func (mr *MockRepositoryMockRecorder) CheckDialogueUsers(uid1, uid2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDialogueUsers", reflect.TypeOf((*MockRepository)(nil).CheckDialogueUsers), uid1, uid2)
}

// CheckMessage mocks base method.
func (m *MockRepository) CheckMessage(id uint64) (bool, models.EasyDialogueMessageSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMessage", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(models.EasyDialogueMessageSQL)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckMessage indicates an expected call of CheckMessage.
func (mr *MockRepositoryMockRecorder) CheckMessage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMessage", reflect.TypeOf((*MockRepository)(nil).CheckMessage), id)
}

// DecrementCountMessages mocks base method.
func (m *MockRepository) DecrementCountMessages(id uint64, count int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementCountMessages", id, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementCountMessages indicates an expected call of DecrementCountMessages.
func (mr *MockRepositoryMockRecorder) DecrementCountMessages(id, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementCountMessages", reflect.TypeOf((*MockRepository)(nil).DecrementCountMessages), id, count)
}

// DeleteDialogue mocks base method.
func (m *MockRepository) DeleteDialogue(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDialogue", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDialogue indicates an expected call of DeleteDialogue.
func (mr *MockRepositoryMockRecorder) DeleteDialogue(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDialogue", reflect.TypeOf((*MockRepository)(nil).DeleteDialogue), id)
}

// DeleteMessage mocks base method.
func (m *MockRepository) DeleteMessage(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockRepositoryMockRecorder) DeleteMessage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockRepository)(nil).DeleteMessage), id)
}

// DialogueMessagesSearch mocks base method.
func (m *MockRepository) DialogueMessagesSearch(uid, id uint64, str string, page int) (models.DialogueCardsSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialogueMessagesSearch", uid, id, str, page)
	ret0, _ := ret[0].(models.DialogueCardsSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialogueMessagesSearch indicates an expected call of DialogueMessagesSearch.
func (mr *MockRepositoryMockRecorder) DialogueMessagesSearch(uid, id, str, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialogueMessagesSearch", reflect.TypeOf((*MockRepository)(nil).DialogueMessagesSearch), uid, id, str, page)
}

// EditMessage mocks base method.
func (m *MockRepository) EditMessage(id uint64, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMessage", id, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditMessage indicates an expected call of EditMessage.
func (mr *MockRepositoryMockRecorder) EditMessage(id, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMessage", reflect.TypeOf((*MockRepository)(nil).EditMessage), id, text)
}

// GetAllCounts mocks base method.
func (m *MockRepository) GetAllCounts(uid uint64) (models.Counts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounts", uid)
	ret0, _ := ret[0].(models.Counts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCounts indicates an expected call of GetAllCounts.
func (mr *MockRepositoryMockRecorder) GetAllCounts(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounts", reflect.TypeOf((*MockRepository)(nil).GetAllCounts), uid)
}

// GetAllDialogues mocks base method.
func (m *MockRepository) GetAllDialogues(uid uint64, page int) (models.DialogueCardsSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDialogues", uid, page)
	ret0, _ := ret[0].(models.DialogueCardsSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDialogues indicates an expected call of GetAllDialogues.
func (mr *MockRepositoryMockRecorder) GetAllDialogues(uid, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDialogues", reflect.TypeOf((*MockRepository)(nil).GetAllDialogues), uid, page)
}

// GetAllNotifications mocks base method.
func (m *MockRepository) GetAllNotifications(uid uint64, page int, now time.Time) (models.NotificationsSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotifications", uid, page, now)
	ret0, _ := ret[0].(models.NotificationsSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotifications indicates an expected call of GetAllNotifications.
func (mr *MockRepositoryMockRecorder) GetAllNotifications(uid, page, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotifications", reflect.TypeOf((*MockRepository)(nil).GetAllNotifications), uid, page, now)
}

// GetEasyMessage mocks base method.
func (m *MockRepository) GetEasyMessage(id uint64) (models.EasyDialogueMessageSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEasyMessage", id)
	ret0, _ := ret[0].(models.EasyDialogueMessageSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEasyMessage indicates an expected call of GetEasyMessage.
func (mr *MockRepositoryMockRecorder) GetEasyMessage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEasyMessage", reflect.TypeOf((*MockRepository)(nil).GetEasyMessage), id)
}

// GetMessages mocks base method.
func (m *MockRepository) GetMessages(id uint64, page int) (models.MessagesSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", id, page)
	ret0, _ := ret[0].(models.MessagesSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockRepositoryMockRecorder) GetMessages(id, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockRepository)(nil).GetMessages), id, page)
}

// GetNotificationCounts mocks base method.
func (m *MockRepository) GetNotificationCounts(uid uint64, now time.Time) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationCounts", uid, now)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationCounts indicates an expected call of GetNotificationCounts.
func (mr *MockRepositoryMockRecorder) GetNotificationCounts(uid, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationCounts", reflect.TypeOf((*MockRepository)(nil).GetNotificationCounts), uid, now)
}

// MessagesSearch mocks base method.
func (m *MockRepository) MessagesSearch(uid uint64, str string, page int) (models.DialogueCardsSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagesSearch", uid, str, page)
	ret0, _ := ret[0].(models.DialogueCardsSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagesSearch indicates an expected call of MessagesSearch.
func (mr *MockRepositoryMockRecorder) MessagesSearch(uid, str, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagesSearch", reflect.TypeOf((*MockRepository)(nil).MessagesSearch), uid, str, page)
}

// NewDialogue mocks base method.
func (m *MockRepository) NewDialogue(uid1, uid2 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDialogue", uid1, uid2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDialogue indicates an expected call of NewDialogue.
func (mr *MockRepositoryMockRecorder) NewDialogue(uid1, uid2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDialogue", reflect.TypeOf((*MockRepository)(nil).NewDialogue), uid1, uid2)
}

// ReadMessages mocks base method.
func (m *MockRepository) ReadMessages(id uint64, page int, uid uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessages", id, page, uid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessages indicates an expected call of ReadMessages.
func (mr *MockRepositoryMockRecorder) ReadMessages(id, page, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessages", reflect.TypeOf((*MockRepository)(nil).ReadMessages), id, page, uid)
}

// ReadNotifications mocks base method.
func (m *MockRepository) ReadNotifications(uid uint64, page int, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNotifications", uid, page, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadNotifications indicates an expected call of ReadNotifications.
func (mr *MockRepositoryMockRecorder) ReadNotifications(uid, page, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNotifications", reflect.TypeOf((*MockRepository)(nil).ReadNotifications), uid, page, now)
}

// SendMessage mocks base method.
func (m *MockRepository) SendMessage(id uint64, newMessage *models.NewMessage, uid uint64, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", id, newMessage, uid, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockRepositoryMockRecorder) SendMessage(id, newMessage, uid, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockRepository)(nil).SendMessage), id, newMessage, uid, now)
}

// SetZeroCountNotifications mocks base method.
func (m *MockRepository) SetZeroCountNotifications(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetZeroCountNotifications", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetZeroCountNotifications indicates an expected call of SetZeroCountNotifications.
func (mr *MockRepositoryMockRecorder) SetZeroCountNotifications(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetZeroCountNotifications", reflect.TypeOf((*MockRepository)(nil).SetZeroCountNotifications), id)
}
