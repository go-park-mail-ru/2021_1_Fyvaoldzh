// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	GetAllDialogues(ctx context.Context, in *IdPage, opts ...grpc.CallOption) (*DialogueCards, error)
	GetOneDialogue(ctx context.Context, in *IdIdPage, opts ...grpc.CallOption) (*Dialogue, error)
	DeleteDialogue(ctx context.Context, in *IdId, opts ...grpc.CallOption) (*Answer, error)
	SendMessage(ctx context.Context, in *SendEditMessage, opts ...grpc.CallOption) (*Answer, error)
	EditMessage(ctx context.Context, in *SendEditMessage, opts ...grpc.CallOption) (*Answer, error)
	DeleteMessage(ctx context.Context, in *IdId, opts ...grpc.CallOption) (*Answer, error)
	Mailing(ctx context.Context, in *MailingIn, opts ...grpc.CallOption) (*Answer, error)
	Search(ctx context.Context, in *SearchIn, opts ...grpc.CallOption) (*DialogueCards, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) GetAllDialogues(ctx context.Context, in *IdPage, opts ...grpc.CallOption) (*DialogueCards, error) {
	out := new(DialogueCards)
	err := c.cc.Invoke(ctx, "/Chat/GetAllDialogues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetOneDialogue(ctx context.Context, in *IdIdPage, opts ...grpc.CallOption) (*Dialogue, error) {
	out := new(Dialogue)
	err := c.cc.Invoke(ctx, "/Chat/GetOneDialogue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DeleteDialogue(ctx context.Context, in *IdId, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/Chat/DeleteDialogue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SendMessage(ctx context.Context, in *SendEditMessage, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/Chat/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) EditMessage(ctx context.Context, in *SendEditMessage, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/Chat/EditMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DeleteMessage(ctx context.Context, in *IdId, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/Chat/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Mailing(ctx context.Context, in *MailingIn, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/Chat/Mailing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Search(ctx context.Context, in *SearchIn, opts ...grpc.CallOption) (*DialogueCards, error) {
	out := new(DialogueCards)
	err := c.cc.Invoke(ctx, "/Chat/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	GetAllDialogues(context.Context, *IdPage) (*DialogueCards, error)
	GetOneDialogue(context.Context, *IdIdPage) (*Dialogue, error)
	DeleteDialogue(context.Context, *IdId) (*Answer, error)
	SendMessage(context.Context, *SendEditMessage) (*Answer, error)
	EditMessage(context.Context, *SendEditMessage) (*Answer, error)
	DeleteMessage(context.Context, *IdId) (*Answer, error)
	Mailing(context.Context, *MailingIn) (*Answer, error)
	Search(context.Context, *SearchIn) (*DialogueCards, error)
	//mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) GetAllDialogues(context.Context, *IdPage) (*DialogueCards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDialogues not implemented")
}
func (UnimplementedChatServer) GetOneDialogue(context.Context, *IdIdPage) (*Dialogue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneDialogue not implemented")
}
func (UnimplementedChatServer) DeleteDialogue(context.Context, *IdId) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDialogue not implemented")
}
func (UnimplementedChatServer) SendMessage(context.Context, *SendEditMessage) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServer) EditMessage(context.Context, *SendEditMessage) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (UnimplementedChatServer) DeleteMessage(context.Context, *IdId) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedChatServer) Mailing(context.Context, *MailingIn) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mailing not implemented")
}
func (UnimplementedChatServer) Search(context.Context, *SearchIn) (*DialogueCards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_GetAllDialogues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetAllDialogues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat/GetAllDialogues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetAllDialogues(ctx, req.(*IdPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetOneDialogue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdIdPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetOneDialogue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat/GetOneDialogue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetOneDialogue(ctx, req.(*IdIdPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DeleteDialogue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DeleteDialogue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat/DeleteDialogue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DeleteDialogue(ctx, req.(*IdId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEditMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SendMessage(ctx, req.(*SendEditMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEditMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat/EditMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).EditMessage(ctx, req.(*SendEditMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DeleteMessage(ctx, req.(*IdId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Mailing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailingIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Mailing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat/Mailing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Mailing(ctx, req.(*MailingIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Search(ctx, req.(*SearchIn))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllDialogues",
			Handler:    _Chat_GetAllDialogues_Handler,
		},
		{
			MethodName: "GetOneDialogue",
			Handler:    _Chat_GetOneDialogue_Handler,
		},
		{
			MethodName: "DeleteDialogue",
			Handler:    _Chat_DeleteDialogue_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Chat_SendMessage_Handler,
		},
		{
			MethodName: "EditMessage",
			Handler:    _Chat_EditMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _Chat_DeleteMessage_Handler,
		},
		{
			MethodName: "Mailing",
			Handler:    _Chat_Mailing_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Chat_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
