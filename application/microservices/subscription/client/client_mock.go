// Code generated by MockGen. DO NOT EDIT.
// Source: client_interface.go

// Package mock_client is a generated GoMock package.
package client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISubscriptionClient is a mock of ISubscriptionClient interface.
type MockISubscriptionClient struct {
	ctrl     *gomock.Controller
	recorder *MockISubscriptionClientMockRecorder
}

// MockISubscriptionClientMockRecorder is the mock recorder for MockISubscriptionClient.
type MockISubscriptionClientMockRecorder struct {
	mock *MockISubscriptionClient
}

// NewMockISubscriptionClient creates a new mock instance.
func NewMockISubscriptionClient(ctrl *gomock.Controller) *MockISubscriptionClient {
	mock := &MockISubscriptionClient{ctrl: ctrl}
	mock.recorder = &MockISubscriptionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISubscriptionClient) EXPECT() *MockISubscriptionClientMockRecorder {
	return m.recorder
}

// AddPlanningEvent mocks base method.
func (m *MockISubscriptionClient) AddPlanningEvent(userId, eventId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlanningEvent", userId, eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPlanningEvent indicates an expected call of AddPlanningEvent.
func (mr *MockISubscriptionClientMockRecorder) AddPlanningEvent(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlanningEvent", reflect.TypeOf((*MockISubscriptionClient)(nil).AddPlanningEvent), userId, eventId)
}

// AddVisitedEvent mocks base method.
func (m *MockISubscriptionClient) AddVisitedEvent(userId, eventId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVisitedEvent", userId, eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVisitedEvent indicates an expected call of AddVisitedEvent.
func (mr *MockISubscriptionClientMockRecorder) AddVisitedEvent(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVisitedEvent", reflect.TypeOf((*MockISubscriptionClient)(nil).AddVisitedEvent), userId, eventId)
}

// Close mocks base method.
func (m *MockISubscriptionClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockISubscriptionClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockISubscriptionClient)(nil).Close))
}

// RemoveEvent mocks base method.
func (m *MockISubscriptionClient) RemoveEvent(userId, eventId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEvent", userId, eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEvent indicates an expected call of RemoveEvent.
func (mr *MockISubscriptionClientMockRecorder) RemoveEvent(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEvent", reflect.TypeOf((*MockISubscriptionClient)(nil).RemoveEvent), userId, eventId)
}

// Subscribe mocks base method.
func (m *MockISubscriptionClient) Subscribe(subscriberId, subscribedToId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", subscriberId, subscribedToId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockISubscriptionClientMockRecorder) Subscribe(subscriberId, subscribedToId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockISubscriptionClient)(nil).Subscribe), subscriberId, subscribedToId)
}

// Unsubscribe mocks base method.
func (m *MockISubscriptionClient) Unsubscribe(subscriberId, subscribedToId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", subscriberId, subscribedToId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockISubscriptionClientMockRecorder) Unsubscribe(subscriberId, subscribedToId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockISubscriptionClient)(nil).Unsubscribe), subscriberId, subscribedToId)
}
