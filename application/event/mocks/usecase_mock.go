// Code generated by MockGen. DO NOT EDIT.
// Source: ../usecase.go

// Package mock_event is a generated GoMock package.
package mock_event

import (
	models "kudago/application/models"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateNewEvent mocks base method.
func (m *MockUseCase) CreateNewEvent(newEvent *models.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewEvent", newEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewEvent indicates an expected call of CreateNewEvent.
func (mr *MockUseCaseMockRecorder) CreateNewEvent(newEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewEvent", reflect.TypeOf((*MockUseCase)(nil).CreateNewEvent), newEvent)
}

// Delete mocks base method.
func (m *MockUseCase) Delete(eventId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUseCaseMockRecorder) Delete(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUseCase)(nil).Delete), eventId)
}

// FindEvents mocks base method.
func (m *MockUseCase) FindEvents(str, category string, page int) (models.EventCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEvents", str, category, page)
	ret0, _ := ret[0].(models.EventCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEvents indicates an expected call of FindEvents.
func (mr *MockUseCaseMockRecorder) FindEvents(str, category, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEvents", reflect.TypeOf((*MockUseCase)(nil).FindEvents), str, category, page)
}

// GetAllEvents mocks base method.
func (m *MockUseCase) GetAllEvents(page int) (models.EventCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEvents", page)
	ret0, _ := ret[0].(models.EventCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEvents indicates an expected call of GetAllEvents.
func (mr *MockUseCaseMockRecorder) GetAllEvents(page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEvents", reflect.TypeOf((*MockUseCase)(nil).GetAllEvents), page)
}

// GetEventsByCategory mocks base method.
func (m *MockUseCase) GetEventsByCategory(typeEvent string, page int) (models.EventCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByCategory", typeEvent, page)
	ret0, _ := ret[0].(models.EventCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByCategory indicates an expected call of GetEventsByCategory.
func (mr *MockUseCaseMockRecorder) GetEventsByCategory(typeEvent, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByCategory", reflect.TypeOf((*MockUseCase)(nil).GetEventsByCategory), typeEvent, page)
}

// GetImage mocks base method.
func (m *MockUseCase) GetImage(eventId uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", eventId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockUseCaseMockRecorder) GetImage(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockUseCase)(nil).GetImage), eventId)
}

// GetNear mocks base method.
func (m *MockUseCase) GetNear(coord models.Coordinates, page int) (models.EventCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNear", coord, page)
	ret0, _ := ret[0].(models.EventCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNear indicates an expected call of GetNear.
func (mr *MockUseCaseMockRecorder) GetNear(coord, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNear", reflect.TypeOf((*MockUseCase)(nil).GetNear), coord, page)
}

// GetOneEvent mocks base method.
func (m *MockUseCase) GetOneEvent(eventId uint64) (models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneEvent", eventId)
	ret0, _ := ret[0].(models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneEvent indicates an expected call of GetOneEvent.
func (mr *MockUseCaseMockRecorder) GetOneEvent(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneEvent", reflect.TypeOf((*MockUseCase)(nil).GetOneEvent), eventId)
}

// GetOneEventName mocks base method.
func (m *MockUseCase) GetOneEventName(eventId uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneEventName", eventId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneEventName indicates an expected call of GetOneEventName.
func (mr *MockUseCaseMockRecorder) GetOneEventName(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneEventName", reflect.TypeOf((*MockUseCase)(nil).GetOneEventName), eventId)
}

// GetRecommended mocks base method.
func (m *MockUseCase) GetRecommended(uid uint64, page int) (models.EventCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommended", uid, page)
	ret0, _ := ret[0].(models.EventCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommended indicates an expected call of GetRecommended.
func (mr *MockUseCaseMockRecorder) GetRecommended(uid, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommended", reflect.TypeOf((*MockUseCase)(nil).GetRecommended), uid, page)
}

// RecomendSystem mocks base method.
func (m *MockUseCase) RecomendSystem(uid uint64, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecomendSystem", uid, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecomendSystem indicates an expected call of RecomendSystem.
func (mr *MockUseCaseMockRecorder) RecomendSystem(uid, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecomendSystem", reflect.TypeOf((*MockUseCase)(nil).RecomendSystem), uid, category)
}

// SaveImage mocks base method.
func (m *MockUseCase) SaveImage(eventId uint64, img *multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveImage", eventId, img)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveImage indicates an expected call of SaveImage.
func (mr *MockUseCaseMockRecorder) SaveImage(eventId, img interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImage", reflect.TypeOf((*MockUseCase)(nil).SaveImage), eventId, img)
}
