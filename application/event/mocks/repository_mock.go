// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository.go

// Package mock_event is a generated GoMock package.
package mock_event

import (
	models "kudago/application/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddEvent mocks base method.
func (m *MockRepository) AddEvent(newEvent *models.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvent", newEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockRepositoryMockRecorder) AddEvent(newEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockRepository)(nil).AddEvent), newEvent)
}

// CategorySearch mocks base method.
func (m *MockRepository) CategorySearch(str, category string, now time.Time, page int) ([]models.EventCardWithDateSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategorySearch", str, category, now, page)
	ret0, _ := ret[0].([]models.EventCardWithDateSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CategorySearch indicates an expected call of CategorySearch.
func (mr *MockRepositoryMockRecorder) CategorySearch(str, category, now, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategorySearch", reflect.TypeOf((*MockRepository)(nil).CategorySearch), str, category, now, page)
}

// DeleteById mocks base method.
func (m *MockRepository) DeleteById(eventId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockRepositoryMockRecorder) DeleteById(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockRepository)(nil).DeleteById), eventId)
}

// FindEvents mocks base method.
func (m *MockRepository) FindEvents(str string, now time.Time, page int) ([]models.EventCardWithDateSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEvents", str, now, page)
	ret0, _ := ret[0].([]models.EventCardWithDateSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEvents indicates an expected call of FindEvents.
func (mr *MockRepositoryMockRecorder) FindEvents(str, now, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEvents", reflect.TypeOf((*MockRepository)(nil).FindEvents), str, now, page)
}

// GetAllEvents mocks base method.
func (m *MockRepository) GetAllEvents(now time.Time, page int) ([]models.EventCardWithDateSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEvents", now, page)
	ret0, _ := ret[0].([]models.EventCardWithDateSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEvents indicates an expected call of GetAllEvents.
func (mr *MockRepositoryMockRecorder) GetAllEvents(now, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEvents", reflect.TypeOf((*MockRepository)(nil).GetAllEvents), now, page)
}

// GetEventsByCategory mocks base method.
func (m *MockRepository) GetEventsByCategory(typeEvent string, now time.Time, page int) ([]models.EventCardWithDateSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByCategory", typeEvent, now, page)
	ret0, _ := ret[0].([]models.EventCardWithDateSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByCategory indicates an expected call of GetEventsByCategory.
func (mr *MockRepositoryMockRecorder) GetEventsByCategory(typeEvent, now, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByCategory", reflect.TypeOf((*MockRepository)(nil).GetEventsByCategory), typeEvent, now, page)
}

// GetNearEvents mocks base method.
func (m *MockRepository) GetNearEvents(now time.Time, coord models.Coordinates, page int) ([]models.EventCardWithDateSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearEvents", now, coord, page)
	ret0, _ := ret[0].([]models.EventCardWithDateSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearEvents indicates an expected call of GetNearEvents.
func (mr *MockRepositoryMockRecorder) GetNearEvents(now, coord, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearEvents", reflect.TypeOf((*MockRepository)(nil).GetNearEvents), now, coord, page)
}

// GetOneEventByID mocks base method.
func (m *MockRepository) GetOneEventByID(eventId uint64) (models.EventSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneEventByID", eventId)
	ret0, _ := ret[0].(models.EventSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneEventByID indicates an expected call of GetOneEventByID.
func (mr *MockRepositoryMockRecorder) GetOneEventByID(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneEventByID", reflect.TypeOf((*MockRepository)(nil).GetOneEventByID), eventId)
}

// GetOneEventNameByID mocks base method.
func (m *MockRepository) GetOneEventNameByID(eventId uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneEventNameByID", eventId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneEventNameByID indicates an expected call of GetOneEventNameByID.
func (mr *MockRepositoryMockRecorder) GetOneEventNameByID(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneEventNameByID", reflect.TypeOf((*MockRepository)(nil).GetOneEventNameByID), eventId)
}

// GetPreference mocks base method.
func (m *MockRepository) GetPreference(uid uint64) (models.Recomend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreference", uid)
	ret0, _ := ret[0].(models.Recomend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreference indicates an expected call of GetPreference.
func (mr *MockRepositoryMockRecorder) GetPreference(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreference", reflect.TypeOf((*MockRepository)(nil).GetPreference), uid)
}

// GetRecommended mocks base method.
func (m *MockRepository) GetRecommended(uid uint64, now time.Time, page int) ([]models.EventCardWithDateSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommended", uid, now, page)
	ret0, _ := ret[0].([]models.EventCardWithDateSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommended indicates an expected call of GetRecommended.
func (mr *MockRepositoryMockRecorder) GetRecommended(uid, now, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommended", reflect.TypeOf((*MockRepository)(nil).GetRecommended), uid, now, page)
}

// GetTags mocks base method.
func (m *MockRepository) GetTags(eventId uint64) (models.Tags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", eventId)
	ret0, _ := ret[0].(models.Tags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockRepositoryMockRecorder) GetTags(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockRepository)(nil).GetTags), eventId)
}

// RecomendSystem mocks base method.
func (m *MockRepository) RecomendSystem(uid uint64, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecomendSystem", uid, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecomendSystem indicates an expected call of RecomendSystem.
func (mr *MockRepositoryMockRecorder) RecomendSystem(uid, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecomendSystem", reflect.TypeOf((*MockRepository)(nil).RecomendSystem), uid, category)
}

// UpdateEventAvatar mocks base method.
func (m *MockRepository) UpdateEventAvatar(eventId uint64, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventAvatar", eventId, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventAvatar indicates an expected call of UpdateEventAvatar.
func (mr *MockRepositoryMockRecorder) UpdateEventAvatar(eventId, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventAvatar", reflect.TypeOf((*MockRepository)(nil).UpdateEventAvatar), eventId, path)
}
