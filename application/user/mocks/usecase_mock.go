// Code generated by MockGen. DO NOT EDIT.
// Source: ../usecase.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	models "kudago/application/models"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockUseCase) Add(usr *models.RegData) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", usr)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockUseCaseMockRecorder) Add(usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUseCase)(nil).Add), usr)
}

// CheckUser mocks base method.
func (m *MockUseCase) CheckUser(usr *models.User) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", usr)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockUseCaseMockRecorder) CheckUser(usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockUseCase)(nil).CheckUser), usr)
}

// FindUsers mocks base method.
func (m *MockUseCase) FindUsers(str string, page int) (models.UserCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsers", str, page)
	ret0, _ := ret[0].(models.UserCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsers indicates an expected call of FindUsers.
func (mr *MockUseCaseMockRecorder) FindUsers(str, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsers", reflect.TypeOf((*MockUseCase)(nil).FindUsers), str, page)
}

// GetActions mocks base method.
func (m *MockUseCase) GetActions(id uint64, page int) (models.ActionCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActions", id, page)
	ret0, _ := ret[0].(models.ActionCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActions indicates an expected call of GetActions.
func (mr *MockUseCaseMockRecorder) GetActions(id, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActions", reflect.TypeOf((*MockUseCase)(nil).GetActions), id, page)
}

// GetAvatar mocks base method.
func (m *MockUseCase) GetAvatar(id uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockUseCaseMockRecorder) GetAvatar(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockUseCase)(nil).GetAvatar), id)
}

// GetOtherProfile mocks base method.
func (m *MockUseCase) GetOtherProfile(id uint64) (*models.OtherUserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOtherProfile", id)
	ret0, _ := ret[0].(*models.OtherUserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOtherProfile indicates an expected call of GetOtherProfile.
func (mr *MockUseCaseMockRecorder) GetOtherProfile(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtherProfile", reflect.TypeOf((*MockUseCase)(nil).GetOtherProfile), id)
}

// GetOwnProfile mocks base method.
func (m *MockUseCase) GetOwnProfile(id uint64) (*models.UserOwnProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnProfile", id)
	ret0, _ := ret[0].(*models.UserOwnProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnProfile indicates an expected call of GetOwnProfile.
func (mr *MockUseCaseMockRecorder) GetOwnProfile(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnProfile", reflect.TypeOf((*MockUseCase)(nil).GetOwnProfile), id)
}

// GetUsers mocks base method.
func (m *MockUseCase) GetUsers(page int) (models.UserCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", page)
	ret0, _ := ret[0].(models.UserCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUseCaseMockRecorder) GetUsers(page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUseCase)(nil).GetUsers), page)
}

// Login mocks base method.
func (m *MockUseCase) Login(usr *models.User) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", usr)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUseCaseMockRecorder) Login(usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUseCase)(nil).Login), usr)
}

// Update mocks base method.
func (m *MockUseCase) Update(id uint64, user *models.UserOwnProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUseCaseMockRecorder) Update(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUseCase)(nil).Update), id, user)
}

// UploadAvatar mocks base method.
func (m *MockUseCase) UploadAvatar(id uint64, img multipart.File, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar", id, img, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockUseCaseMockRecorder) UploadAvatar(id, img, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockUseCase)(nil).UploadAvatar), id, img, filename)
}
