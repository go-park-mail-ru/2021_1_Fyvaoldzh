// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	models "kudago/application/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRepository) Add(user *models.RegData) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", user)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockRepositoryMockRecorder) Add(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRepository)(nil).Add), user)
}

// AddToPreferences mocks base method.
func (m *MockRepository) AddToPreferences(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToPreferences", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToPreferences indicates an expected call of AddToPreferences.
func (mr *MockRepositoryMockRecorder) AddToPreferences(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToPreferences", reflect.TypeOf((*MockRepository)(nil).AddToPreferences), id)
}

// ChangeAvatar mocks base method.
func (m *MockRepository) ChangeAvatar(id uint64, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAvatar", id, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeAvatar indicates an expected call of ChangeAvatar.
func (mr *MockRepositoryMockRecorder) ChangeAvatar(id, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAvatar", reflect.TypeOf((*MockRepository)(nil).ChangeAvatar), id, path)
}

// GetByIdOwn mocks base method.
func (m *MockRepository) GetByIdOwn(id uint64) (*models.UserDataSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdOwn", id)
	ret0, _ := ret[0].(*models.UserDataSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdOwn indicates an expected call of GetByIdOwn.
func (mr *MockRepositoryMockRecorder) GetByIdOwn(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdOwn", reflect.TypeOf((*MockRepository)(nil).GetByIdOwn), id)
}

// GetUsers mocks base method.
func (m *MockRepository) GetUsers(page int) ([]models.UserCardSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", page)
	ret0, _ := ret[0].([]models.UserCardSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockRepositoryMockRecorder) GetUsers(page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockRepository)(nil).GetUsers), page)
}

// IsCorrect mocks base method.
func (m *MockRepository) IsCorrect(user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCorrect", user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCorrect indicates an expected call of IsCorrect.
func (mr *MockRepositoryMockRecorder) IsCorrect(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCorrect", reflect.TypeOf((*MockRepository)(nil).IsCorrect), user)
}

// IsExisting mocks base method.
func (m *MockRepository) IsExisting(login string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExisting", login)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExisting indicates an expected call of IsExisting.
func (mr *MockRepositoryMockRecorder) IsExisting(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExisting", reflect.TypeOf((*MockRepository)(nil).IsExisting), login)
}

// IsExistingEmail mocks base method.
func (m *MockRepository) IsExistingEmail(login string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistingEmail", login)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExistingEmail indicates an expected call of IsExistingEmail.
func (mr *MockRepositoryMockRecorder) IsExistingEmail(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistingEmail", reflect.TypeOf((*MockRepository)(nil).IsExistingEmail), login)
}

// IsExistingUserId mocks base method.
func (m *MockRepository) IsExistingUserId(userId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistingUserId", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsExistingUserId indicates an expected call of IsExistingUserId.
func (mr *MockRepositoryMockRecorder) IsExistingUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistingUserId", reflect.TypeOf((*MockRepository)(nil).IsExistingUserId), userId)
}

// Update mocks base method.
func (m *MockRepository) Update(id uint64, upUser *models.UserDataSQL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, upUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(id, upUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), id, upUser)
}
