// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	sql "database/sql"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeKudagoApplicationModels(in *jlexer.Lexer, out *UsersOnEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(UsersOnEvent, 0, 1)
			} else {
				*out = UsersOnEvent{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 UserOnEvent
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels(out *jwriter.Writer, in UsersOnEvent) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v UsersOnEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsersOnEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsersOnEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsersOnEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels1(in *jlexer.Lexer, out *UserOwnProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Uid":
			out.Uid = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "birthday":
			out.Birthday = string(in.String())
		case "city":
			out.City = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "followers":
			out.Followers = uint64(in.Uint64())
		case "subscriptions":
			out.Subscriptions = uint64(in.Uint64())
		case "about":
			out.About = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "old_password":
			out.OldPassword = string(in.String())
		case "new_password":
			out.NewPassword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels1(out *jwriter.Writer, in UserOwnProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Uid\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Uid))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(in.Birthday))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"followers\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Followers))
	}
	{
		const prefix string = ",\"subscriptions\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Subscriptions))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"old_password\":"
		out.RawString(prefix)
		out.String(string(in.OldPassword))
	}
	{
		const prefix string = ",\"new_password\":"
		out.RawString(prefix)
		out.String(string(in.NewPassword))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserOwnProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserOwnProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserOwnProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserOwnProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels1(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels2(in *jlexer.Lexer, out *UserOnEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels2(out *jwriter.Writer, in UserOnEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserOnEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserOnEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserOnEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserOnEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels2(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels3(in *jlexer.Lexer, out *UserEvents) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Uid":
			out.Uid = uint64(in.Uint64())
		case "Eid":
			out.Eid = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels3(out *jwriter.Writer, in UserEvents) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Uid\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Uid))
	}
	{
		const prefix string = ",\"Eid\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Eid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserEvents) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserEvents) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserEvents) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserEvents) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels3(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels4(in *jlexer.Lexer, out *UserDataSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint64(in.Uint64())
		case "Name":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Name)
		case "Login":
			out.Login = string(in.String())
		case "Birthday":
			easyjsonD2b7633eDecodeDatabaseSql1(in, &out.Birthday)
		case "City":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.City)
		case "Email":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Email)
		case "About":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.About)
		case "Password":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Password)
		case "Avatar":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Avatar)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels4(out *jwriter.Writer, in UserDataSQL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Name)
	}
	{
		const prefix string = ",\"Login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"Birthday\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql1(out, in.Birthday)
	}
	{
		const prefix string = ",\"City\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.City)
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Email)
	}
	{
		const prefix string = ",\"About\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.About)
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Password)
	}
	{
		const prefix string = ",\"Avatar\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Avatar)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserDataSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserDataSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserDataSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserDataSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels4(l, v)
}
func easyjsonD2b7633eDecodeDatabaseSql1(in *jlexer.Lexer, out *sql.NullTime) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDatabaseSql1(out *jwriter.Writer, in sql.NullTime) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeDatabaseSql(in *jlexer.Lexer, out *sql.NullString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "String":
			out.String = string(in.String())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDatabaseSql(out *jwriter.Writer, in sql.NullString) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix[1:])
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeKudagoApplicationModels5(in *jlexer.Lexer, out *UserCards) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(UserCards, 0, 0)
			} else {
				*out = UserCards{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 UserCard
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels5(out *jwriter.Writer, in UserCards) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v UserCards) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserCards) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserCards) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserCards) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels5(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels6(in *jlexer.Lexer, out *UserCardSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint64(in.Uint64())
		case "Name":
			out.Name = string(in.String())
		case "Avatar":
			out.Avatar = string(in.String())
		case "Birthday":
			easyjsonD2b7633eDecodeDatabaseSql1(in, &out.Birthday)
		case "City":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.City)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels6(out *jwriter.Writer, in UserCardSQL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"Birthday\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql1(out, in.Birthday)
	}
	{
		const prefix string = ",\"City\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.City)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserCardSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserCardSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserCardSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserCardSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels6(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels7(in *jlexer.Lexer, out *UserCard) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "age":
			out.Age = uint8(in.Uint8())
		case "city":
			out.City = string(in.String())
		case "followers":
			out.Followers = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels7(out *jwriter.Writer, in UserCard) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Age))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"followers\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Followers))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserCard) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserCard) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserCard) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserCard) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels7(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels8(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint64(in.Uint64())
		case "login":
			out.Login = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels8(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels8(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels9(in *jlexer.Lexer, out *Tags) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Tags, 0, 2)
			} else {
				*out = Tags{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 Tag
			(v7).UnmarshalEasyJSON(in)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels9(out *jwriter.Writer, in Tags) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			(v9).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Tags) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tags) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tags) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tags) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels9(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels10(in *jlexer.Lexer, out *Tag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels10(out *jwriter.Writer, in Tag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tag) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tag) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels10(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels11(in *jlexer.Lexer, out *RegData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels11(out *jwriter.Writer, in RegData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels11(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels12(in *jlexer.Lexer, out *RedactMessageJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels12(out *jwriter.Writer, in RedactMessageJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RedactMessageJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RedactMessageJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RedactMessageJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RedactMessageJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels12(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels13(in *jlexer.Lexer, out *RedactMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "Text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels13(out *jwriter.Writer, in RedactMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RedactMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RedactMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RedactMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RedactMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels13(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels14(in *jlexer.Lexer, out *Recomend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "show":
			out.Show = uint64(in.Uint64())
		case "movie":
			out.Movie = uint64(in.Uint64())
		case "concert":
			out.Concert = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels14(out *jwriter.Writer, in Recomend) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"show\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Show))
	}
	{
		const prefix string = ",\"movie\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Movie))
	}
	{
		const prefix string = ",\"concert\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Concert))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Recomend) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Recomend) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Recomend) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Recomend) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels14(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels15(in *jlexer.Lexer, out *OtherUserProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Uid":
			out.Uid = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "age":
			out.Age = uint8(in.Uint8())
		case "city":
			out.City = string(in.String())
		case "about":
			out.About = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "followers":
			out.Followers = uint64(in.Uint64())
		case "subscriptions":
			out.Subscriptions = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels15(out *jwriter.Writer, in OtherUserProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Uid\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Uid))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Age))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"followers\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Followers))
	}
	{
		const prefix string = ",\"subscriptions\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Subscriptions))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OtherUserProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OtherUserProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OtherUserProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OtherUserProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels15(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels16(in *jlexer.Lexer, out *NotificationsSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(NotificationsSQL, 0, 1)
			} else {
				*out = NotificationsSQL{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 NotificationSQL
			(v10).UnmarshalEasyJSON(in)
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels16(out *jwriter.Writer, in NotificationsSQL) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			(v12).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v NotificationsSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NotificationsSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NotificationsSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NotificationsSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels16(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels17(in *jlexer.Lexer, out *Notifications) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Notifications, 0, 0)
			} else {
				*out = Notifications{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v13 Notification
			(v13).UnmarshalEasyJSON(in)
			*out = append(*out, v13)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels17(out *jwriter.Writer, in Notifications) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in {
			if v14 > 0 {
				out.RawByte(',')
			}
			(v15).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Notifications) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Notifications) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Notifications) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Notifications) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels17(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels18(in *jlexer.Lexer, out *NotificationSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "Type":
			out.Type = string(in.String())
		case "Date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "Read":
			out.Read = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels18(out *jwriter.Writer, in NotificationSQL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"Read\":"
		out.RawString(prefix)
		out.Bool(bool(in.Read))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NotificationSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NotificationSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NotificationSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NotificationSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels18(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels19(in *jlexer.Lexer, out *Notification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "id_to_image":
			out.IDToImage = uint64(in.Uint64())
		case "type":
			out.Type = string(in.String())
		case "date":
			out.Date = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "read":
			out.Read = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels19(out *jwriter.Writer, in Notification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"id_to_image\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.IDToImage))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"read\":"
		out.RawString(prefix)
		out.Bool(bool(in.Read))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Notification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Notification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Notification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Notification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels19(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels20(in *jlexer.Lexer, out *NewMessageJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "to":
			out.To = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels20(out *jwriter.Writer, in NewMessageJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix[1:])
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewMessageJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewMessageJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewMessageJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewMessageJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels20(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels21(in *jlexer.Lexer, out *NewMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "To":
			out.To = uint64(in.Uint64())
		case "Text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels21(out *jwriter.Writer, in NewMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.To))
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels21(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels22(in *jlexer.Lexer, out *MessagesSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(MessagesSQL, 0, 0)
			} else {
				*out = MessagesSQL{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v16 MessageSQL
			(v16).UnmarshalEasyJSON(in)
			*out = append(*out, v16)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels22(out *jwriter.Writer, in MessagesSQL) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in {
			if v17 > 0 {
				out.RawByte(',')
			}
			(v18).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MessagesSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessagesSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessagesSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessagesSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels22(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels23(in *jlexer.Lexer, out *Messages) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Messages, 0, 1)
			} else {
				*out = Messages{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v19 Message
			(v19).UnmarshalEasyJSON(in)
			*out = append(*out, v19)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels23(out *jwriter.Writer, in Messages) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v20, v21 := range in {
			if v20 > 0 {
				out.RawByte(',')
			}
			(v21).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Messages) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Messages) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Messages) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Messages) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels23(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels24(in *jlexer.Lexer, out *MessageSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "From":
			out.From = uint64(in.Uint64())
		case "To":
			out.To = uint64(in.Uint64())
		case "Text":
			out.Text = string(in.String())
		case "Date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "Redact":
			out.Redact = bool(in.Bool())
		case "Read":
			out.Read = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels24(out *jwriter.Writer, in MessageSQL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.To))
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"Date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"Redact\":"
		out.RawString(prefix)
		out.Bool(bool(in.Redact))
	}
	{
		const prefix string = ",\"Read\":"
		out.RawString(prefix)
		out.Bool(bool(in.Read))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels24(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels25(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "fromMe":
			out.FromMe = bool(in.Bool())
		case "text":
			out.Text = string(in.String())
		case "date":
			out.Date = string(in.String())
		case "redact":
			out.Redact = bool(in.Bool())
		case "read":
			out.Read = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels25(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"fromMe\":"
		out.RawString(prefix)
		out.Bool(bool(in.FromMe))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"redact\":"
		out.RawString(prefix)
		out.Bool(bool(in.Redact))
	}
	{
		const prefix string = ",\"read\":"
		out.RawString(prefix)
		out.Bool(bool(in.Read))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels25(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels26(in *jlexer.Lexer, out *MailingJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			out.EventID = uint64(in.Uint64())
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				in.Delim('[')
				if out.To == nil {
					if !in.IsDelim(']') {
						out.To = make([]string, 0, 4)
					} else {
						out.To = []string{}
					}
				} else {
					out.To = (out.To)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.To = append(out.To, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels26(out *jwriter.Writer, in MailingJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.EventID))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		if in.To == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.To {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MailingJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MailingJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MailingJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MailingJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels26(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels27(in *jlexer.Lexer, out *Mailing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			out.EventID = uint64(in.Uint64())
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				in.Delim('[')
				if out.To == nil {
					if !in.IsDelim(']') {
						out.To = make([]uint64, 0, 8)
					} else {
						out.To = []uint64{}
					}
				} else {
					out.To = (out.To)[:0]
				}
				for !in.IsDelim(']') {
					var v25 uint64
					v25 = uint64(in.Uint64())
					out.To = append(out.To, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels27(out *jwriter.Writer, in Mailing) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.EventID))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		if in.To == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.To {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v27))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mailing) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mailing) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mailing) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mailing) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels27(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels28(in *jlexer.Lexer, out *IsAddedEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserId = uint64(in.Uint64())
		case "eventId":
			out.EventId = uint64(in.Uint64())
		case "isAdded":
			out.IsAdded = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels28(out *jwriter.Writer, in IsAddedEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.UserId))
	}
	{
		const prefix string = ",\"eventId\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.EventId))
	}
	{
		const prefix string = ",\"isAdded\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAdded))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IsAddedEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IsAddedEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IsAddedEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IsAddedEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels28(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels29(in *jlexer.Lexer, out *Events) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Events, 0, 0)
			} else {
				*out = Events{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v28 Event
			(v28).UnmarshalEasyJSON(in)
			*out = append(*out, v28)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels29(out *jwriter.Writer, in Events) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v29, v30 := range in {
			if v29 > 0 {
				out.RawByte(',')
			}
			(v30).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Events) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Events) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Events) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Events) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels29(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels30(in *jlexer.Lexer, out *EventSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "Title":
			out.Title = string(in.String())
		case "Place":
			out.Place = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "StartDate":
			easyjsonD2b7633eDecodeDatabaseSql1(in, &out.StartDate)
		case "EndDate":
			easyjsonD2b7633eDecodeDatabaseSql1(in, &out.EndDate)
		case "Subway":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Subway)
		case "Street":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Street)
		case "Category":
			out.Category = string(in.String())
		case "Latitude":
			easyjsonD2b7633eDecodeDatabaseSql2(in, &out.Latitude)
		case "Longitude":
			easyjsonD2b7633eDecodeDatabaseSql2(in, &out.Longitude)
		case "Image":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Image)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels30(out *jwriter.Writer, in EventSQL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Place\":"
		out.RawString(prefix)
		out.String(string(in.Place))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"StartDate\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql1(out, in.StartDate)
	}
	{
		const prefix string = ",\"EndDate\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql1(out, in.EndDate)
	}
	{
		const prefix string = ",\"Subway\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Subway)
	}
	{
		const prefix string = ",\"Street\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Street)
	}
	{
		const prefix string = ",\"Category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql2(out, in.Latitude)
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql2(out, in.Longitude)
	}
	{
		const prefix string = ",\"Image\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Image)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels30(l, v)
}
func easyjsonD2b7633eDecodeDatabaseSql2(in *jlexer.Lexer, out *sql.NullFloat64) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Float64":
			out.Float64 = float64(in.Float64())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDatabaseSql2(out *jwriter.Writer, in sql.NullFloat64) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Float64\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Float64))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeKudagoApplicationModels31(in *jlexer.Lexer, out *EventCards) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(EventCards, 0, 0)
			} else {
				*out = EventCards{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v31 EventCard
			(v31).UnmarshalEasyJSON(in)
			*out = append(*out, v31)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels31(out *jwriter.Writer, in EventCards) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v32, v33 := range in {
			if v32 > 0 {
				out.RawByte(',')
			}
			(v33).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v EventCards) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventCards) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventCards) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventCards) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels31(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels32(in *jlexer.Lexer, out *EventCardWithDateSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "Title":
			out.Title = string(in.String())
		case "Place":
			out.Place = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "StartDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartDate).UnmarshalJSON(data))
			}
		case "EndDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels32(out *jwriter.Writer, in EventCardWithDateSQL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Place\":"
		out.RawString(prefix)
		out.String(string(in.Place))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"StartDate\":"
		out.RawString(prefix)
		out.Raw((in.StartDate).MarshalJSON())
	}
	{
		const prefix string = ",\"EndDate\":"
		out.RawString(prefix)
		out.Raw((in.EndDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventCardWithDateSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventCardWithDateSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventCardWithDateSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventCardWithDateSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels32(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels33(in *jlexer.Lexer, out *EventCard) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "place":
			out.Place = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "startDate":
			out.StartDate = string(in.String())
		case "endDate":
			out.EndDate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels33(out *jwriter.Writer, in EventCard) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"place\":"
		out.RawString(prefix)
		out.String(string(in.Place))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"startDate\":"
		out.RawString(prefix)
		out.String(string(in.StartDate))
	}
	{
		const prefix string = ",\"endDate\":"
		out.RawString(prefix)
		out.String(string(in.EndDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventCard) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventCard) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventCard) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventCard) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels33(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels34(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "place":
			out.Place = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "startDate":
			out.StartDate = string(in.String())
		case "endDate":
			out.EndDate = string(in.String())
		case "subway":
			out.Subway = string(in.String())
		case "street":
			out.Street = string(in.String())
		case "tags":
			(out.Tags).UnmarshalEasyJSON(in)
		case "category":
			out.Category = string(in.String())
		case "coordinates":
			if in.IsNull() {
				in.Skip()
				out.Coordinates = nil
			} else {
				in.Delim('[')
				if out.Coordinates == nil {
					if !in.IsDelim(']') {
						out.Coordinates = make([]float64, 0, 8)
					} else {
						out.Coordinates = []float64{}
					}
				} else {
					out.Coordinates = (out.Coordinates)[:0]
				}
				for !in.IsDelim(']') {
					var v34 float64
					v34 = float64(in.Float64())
					out.Coordinates = append(out.Coordinates, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "image":
			out.Image = string(in.String())
		case "followers":
			(out.Followers).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels34(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"place\":"
		out.RawString(prefix)
		out.String(string(in.Place))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"startDate\":"
		out.RawString(prefix)
		out.String(string(in.StartDate))
	}
	{
		const prefix string = ",\"endDate\":"
		out.RawString(prefix)
		out.String(string(in.EndDate))
	}
	{
		const prefix string = ",\"subway\":"
		out.RawString(prefix)
		out.String(string(in.Subway))
	}
	{
		const prefix string = ",\"street\":"
		out.RawString(prefix)
		out.String(string(in.Street))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		(in.Tags).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"coordinates\":"
		out.RawString(prefix)
		if in.Coordinates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Coordinates {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v36))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"followers\":"
		out.RawString(prefix)
		(in.Followers).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels34(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels35(in *jlexer.Lexer, out *EasyDialogueMessageSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "User1":
			out.User1 = uint64(in.Uint64())
		case "User2":
			out.User2 = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels35(out *jwriter.Writer, in EasyDialogueMessageSQL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"User1\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.User1))
	}
	{
		const prefix string = ",\"User2\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.User2))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EasyDialogueMessageSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EasyDialogueMessageSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EasyDialogueMessageSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EasyDialogueMessageSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels35(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels36(in *jlexer.Lexer, out *DialoguesSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(DialoguesSQL, 0, 1)
			} else {
				*out = DialoguesSQL{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v37 DialogueSQL
			(v37).UnmarshalEasyJSON(in)
			*out = append(*out, v37)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels36(out *jwriter.Writer, in DialoguesSQL) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v38, v39 := range in {
			if v38 > 0 {
				out.RawByte(',')
			}
			(v39).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v DialoguesSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DialoguesSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DialoguesSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DialoguesSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels36(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels37(in *jlexer.Lexer, out *Dialogues) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Dialogues, 0, 0)
			} else {
				*out = Dialogues{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v40 Dialogue
			(v40).UnmarshalEasyJSON(in)
			*out = append(*out, v40)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels37(out *jwriter.Writer, in Dialogues) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v41, v42 := range in {
			if v41 > 0 {
				out.RawByte(',')
			}
			(v42).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Dialogues) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Dialogues) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Dialogues) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Dialogues) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels37(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels38(in *jlexer.Lexer, out *DialogueSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "User1":
			out.User1 = uint64(in.Uint64())
		case "User2":
			out.User2 = uint64(in.Uint64())
		case "DialogMessages":
			(out.DialogMessages).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels38(out *jwriter.Writer, in DialogueSQL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"User1\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.User1))
	}
	{
		const prefix string = ",\"User2\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.User2))
	}
	{
		const prefix string = ",\"DialogMessages\":"
		out.RawString(prefix)
		(in.DialogMessages).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DialogueSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DialogueSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DialogueSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DialogueSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels38(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels39(in *jlexer.Lexer, out *DialogueCardsSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(DialogueCardsSQL, 0, 0)
			} else {
				*out = DialogueCardsSQL{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v43 DialogueCardSQL
			(v43).UnmarshalEasyJSON(in)
			*out = append(*out, v43)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels39(out *jwriter.Writer, in DialogueCardsSQL) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v44, v45 := range in {
			if v44 > 0 {
				out.RawByte(',')
			}
			(v45).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v DialogueCardsSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DialogueCardsSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DialogueCardsSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DialogueCardsSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels39(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels40(in *jlexer.Lexer, out *DialogueCards) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(DialogueCards, 0, 0)
			} else {
				*out = DialogueCards{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v46 DialogueCard
			(v46).UnmarshalEasyJSON(in)
			*out = append(*out, v46)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels40(out *jwriter.Writer, in DialogueCards) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v47, v48 := range in {
			if v47 > 0 {
				out.RawByte(',')
			}
			(v48).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v DialogueCards) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DialogueCards) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DialogueCards) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DialogueCards) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels40(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels41(in *jlexer.Lexer, out *DialogueCardSQL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "User1":
			out.User1 = uint64(in.Uint64())
		case "User2":
			out.User2 = uint64(in.Uint64())
		case "IDMes":
			out.IDMes = uint64(in.Uint64())
		case "From":
			out.From = uint64(in.Uint64())
		case "To":
			out.To = uint64(in.Uint64())
		case "Text":
			out.Text = string(in.String())
		case "Date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "Redact":
			out.Redact = bool(in.Bool())
		case "Read":
			out.Read = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels41(out *jwriter.Writer, in DialogueCardSQL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"User1\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.User1))
	}
	{
		const prefix string = ",\"User2\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.User2))
	}
	{
		const prefix string = ",\"IDMes\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.IDMes))
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.To))
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"Date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"Redact\":"
		out.RawString(prefix)
		out.Bool(bool(in.Redact))
	}
	{
		const prefix string = ",\"Read\":"
		out.RawString(prefix)
		out.Bool(bool(in.Read))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DialogueCardSQL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DialogueCardSQL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DialogueCardSQL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DialogueCardSQL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels41(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels42(in *jlexer.Lexer, out *DialogueCard) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "interlocutor":
			(out.Interlocutor).UnmarshalEasyJSON(in)
		case "message":
			(out.LastMessage).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels42(out *jwriter.Writer, in DialogueCard) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"interlocutor\":"
		out.RawString(prefix)
		(in.Interlocutor).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		(in.LastMessage).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DialogueCard) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DialogueCard) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DialogueCard) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DialogueCard) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels42(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels43(in *jlexer.Lexer, out *Dialogue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "interlocutor":
			(out.Interlocutor).UnmarshalEasyJSON(in)
		case "messages":
			(out.DialogMessages).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels43(out *jwriter.Writer, in Dialogue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"interlocutor\":"
		out.RawString(prefix)
		(in.Interlocutor).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		(in.DialogMessages).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Dialogue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Dialogue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Dialogue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Dialogue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels43(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels44(in *jlexer.Lexer, out *Counts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "notifications":
			out.Notifications = uint64(in.Uint64())
		case "chat":
			out.Chat = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels44(out *jwriter.Writer, in Counts) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"notifications\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Notifications))
	}
	{
		const prefix string = ",\"chat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Chat))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Counts) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Counts) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Counts) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Counts) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels44(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels45(in *jlexer.Lexer, out *Coordinates) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "latitude":
			out.Latitude = float64(in.Float64())
		case "longitude":
			out.Longitude = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels45(out *jwriter.Writer, in Coordinates) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"latitude\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Latitude))
	}
	{
		const prefix string = ",\"longitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Longitude))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Coordinates) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Coordinates) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Coordinates) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Coordinates) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels45(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels46(in *jlexer.Lexer, out *ActionCards) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ActionCards, 0, 0)
			} else {
				*out = ActionCards{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v49 ActionCardStringTime
			(v49).UnmarshalEasyJSON(in)
			*out = append(*out, v49)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels46(out *jwriter.Writer, in ActionCards) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v50, v51 := range in {
			if v50 > 0 {
				out.RawByte(',')
			}
			(v51).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ActionCards) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActionCards) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActionCards) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActionCards) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels46(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels47(in *jlexer.Lexer, out *ActionCardStringTime) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id_1":
			out.Id1 = uint64(in.Uint64())
		case "name_1":
			out.Name1 = string(in.String())
		case "id_2":
			out.Id2 = uint64(in.Uint64())
		case "name_2":
			out.Name2 = string(in.String())
		case "time":
			out.Time = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels47(out *jwriter.Writer, in ActionCardStringTime) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id_1\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id1))
	}
	{
		const prefix string = ",\"name_1\":"
		out.RawString(prefix)
		out.String(string(in.Name1))
	}
	{
		const prefix string = ",\"id_2\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Id2))
	}
	{
		const prefix string = ",\"name_2\":"
		out.RawString(prefix)
		out.String(string(in.Name2))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActionCardStringTime) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActionCardStringTime) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActionCardStringTime) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActionCardStringTime) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels47(l, v)
}
func easyjsonD2b7633eDecodeKudagoApplicationModels48(in *jlexer.Lexer, out *ActionCard) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id1":
			out.Id1 = uint64(in.Uint64())
		case "Name1":
			out.Name1 = string(in.String())
		case "Id2":
			out.Id2 = uint64(in.Uint64())
		case "Name2":
			out.Name2 = string(in.String())
		case "Time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "Type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeKudagoApplicationModels48(out *jwriter.Writer, in ActionCard) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id1\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id1))
	}
	{
		const prefix string = ",\"Name1\":"
		out.RawString(prefix)
		out.String(string(in.Name1))
	}
	{
		const prefix string = ",\"Id2\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Id2))
	}
	{
		const prefix string = ",\"Name2\":"
		out.RawString(prefix)
		out.String(string(in.Name2))
	}
	{
		const prefix string = ",\"Time\":"
		out.RawString(prefix)
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActionCard) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeKudagoApplicationModels48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActionCard) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeKudagoApplicationModels48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActionCard) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeKudagoApplicationModels48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActionCard) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeKudagoApplicationModels48(l, v)
}
